Index: ESP32_BLE_TEST.ino
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * ESP32 BLE Communication Test\r\n * Minimal test case for Android app connectivity\r\n * \r\n * This is a separate test file - does NOT affect main app functionality\r\n */\r\n\r\n#include <BLEDevice.h>\r\n#include <BLEServer.h>\r\n#include <BLEUtils.h>\r\n#include <BLEService.h>\r\n#include <BLECharacteristic.h>\r\n\r\n// Test UUIDs - completely separate from main app\r\n#define TEST_SERVICE_UUID        \"12345678-1234-1234-1234-123456789abc\"\r\n#define TEST_CHARACTERISTIC_UUID \"87654321-4321-4321-4321-cba987654321\"\r\n\r\n// BLE components\r\nBLEServer* pServer = nullptr;\r\nBLECharacteristic* pCharacteristic = nullptr;\r\nbool deviceConnected = false;\r\n\r\n// Test data\r\nint testCounter = 0;\r\nunsigned long lastSendTime = 0;\r\nconst unsigned long SEND_INTERVAL = 1000; // Send every 1 second\r\n\r\n// BLE Server callbacks\r\nclass MyServerCallbacks: public BLEServerCallbacks {\r\n    void onConnect(BLEServer* pServer) {\r\n        deviceConnected = true;\r\n        Serial.println(\"BLE Client connected!\");\r\n    }\r\n    \r\n    void onDisconnect(BLEServer* pServer) {\r\n        deviceConnected = false;\r\n        Serial.println(\"BLE Client disconnected!\");\r\n        // Restart advertising\r\n        pServer->startAdvertising();\r\n        Serial.println(\"Restarted advertising\");\r\n    }\r\n};\r\n\r\n// BLE Characteristic callbacks\r\nclass MyCharacteristicCallbacks: public BLECharacteristicCallbacks {\r\n    void onWrite(BLECharacteristic* pCharacteristic) {\r\n        std::string value = pCharacteristic->getValue();\r\n        if (value.length() > 0) {\r\n            Serial.print(\"Received from Android: \");\r\n            Serial.println(value.c_str());\r\n            \r\n            // Send acknowledgment back\r\n            String ack = \"ACK:\" + String(value.c_str());\r\n            pCharacteristic->setValue(ack.c_str());\r\n            pCharacteristic->notify();\r\n            Serial.print(\"Sent ACK: \");\r\n            Serial.println(ack);\r\n        }\r\n    }\r\n};\r\n\r\nvoid setup() {\r\n    Serial.begin(115200);\r\n    Serial.println(\"ESP32 BLE Communication Test Starting...\");\r\n    \r\n    // Initialize BLE\r\n    BLEDevice::init(\"ESP32_Test\");\r\n    pServer = BLEDevice::createServer();\r\n    pServer->setCallbacks(new MyServerCallbacks());\r\n    \r\n    // Create BLE service\r\n    BLEService* pService = pServer->createService(TEST_SERVICE_UUID);\r\n    \r\n    // Create BLE characteristic with read, write, and notify properties\r\n    pCharacteristic = pService->createCharacteristic(\r\n        TEST_CHARACTERISTIC_UUID,\r\n        BLECharacteristic::PROPERTY_READ |\r\n        BLECharacteristic::PROPERTY_WRITE |\r\n        BLECharacteristic::PROPERTY_NOTIFY\r\n    );\r\n    \r\n    // Set characteristic callbacks\r\n    pCharacteristic->setCallbacks(new MyCharacteristicCallbacks());\r\n    \r\n    // Start the service\r\n    pService->start();\r\n    \r\n    // Start advertising\r\n    BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();\r\n    pAdvertising->addServiceUUID(TEST_SERVICE_UUID);\r\n    pAdvertising->setScanResponse(false);\r\n    pAdvertising->setMinPreferred(0x0);\r\n    BLEDevice::startAdvertising();\r\n    \r\n    Serial.println(\"BLE Test Server Ready!\");\r\n    Serial.print(\"Device Name: ESP32_Test\");\r\n    Serial.print(\"Service UUID: \");\r\n    Serial.println(TEST_SERVICE_UUID);\r\n    Serial.print(\"Characteristic UUID: \");\r\n    Serial.println(TEST_CHARACTERISTIC_UUID);\r\n    Serial.println(\"Waiting for Android app to connect...\");\r\n}\r\n\r\nvoid loop() {\r\n    // Send test data every second if connected\r\n    if (deviceConnected && (millis() - lastSendTime >= SEND_INTERVAL)) {\r\n        sendTestData();\r\n        lastSendTime = millis();\r\n    }\r\n    \r\n    delay(100);\r\n}\r\n\r\nvoid sendTestData() {\r\n    // Create simple test message\r\n    String testMessage = \"TEST:\" + String(testCounter) + \":\" + String(millis());\r\n    \r\n    // Send via BLE\r\n    pCharacteristic->setValue(testMessage.c_str());\r\n    pCharacteristic->notify();\r\n    \r\n    // Print to Serial for debugging\r\n    Serial.print(\"Sent test data: \");\r\n    Serial.println(testMessage);\r\n    \r\n    // Increment counter\r\n    testCounter++;\r\n}\r\n\r\n/*\r\n * Manual test functions - call from Serial Monitor\r\n */\r\nvoid testConnection() {\r\n    Serial.println(\"=== Connection Test ===\");\r\n    Serial.print(\"BLE Status: \");\r\n    Serial.println(deviceConnected ? \"Connected\" : \"Disconnected\");\r\n    Serial.print(\"Test Counter: \");\r\n    Serial.println(testCounter);\r\n    Serial.println(\"=====================\");\r\n}\r\n\r\nvoid sendCustomMessage(String message) {\r\n    if (deviceConnected) {\r\n        pCharacteristic->setValue(message.c_str());\r\n        pCharacteristic->notify();\r\n        Serial.print(\"Sent custom message: \");\r\n        Serial.println(message);\r\n    } else {\r\n        Serial.println(\"Not connected - cannot send message\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/ESP32_BLE_TEST.ino b/ESP32_BLE_TEST.ino
--- a/ESP32_BLE_TEST.ino	(revision da96bdee106191a6c412615d7af59ac0e39fe20d)
+++ b/ESP32_BLE_TEST.ino	(date 1755495788857)
@@ -44,13 +44,14 @@
 // BLE Characteristic callbacks
 class MyCharacteristicCallbacks: public BLECharacteristicCallbacks {
     void onWrite(BLECharacteristic* pCharacteristic) {
-        std::string value = pCharacteristic->getValue();
+        // Get the value as a string directly
+        String value = pCharacteristic->getValue().c_str();
         if (value.length() > 0) {
             Serial.print("Received from Android: ");
-            Serial.println(value.c_str());
+            Serial.println(value);
             
             // Send acknowledgment back
-            String ack = "ACK:" + String(value.c_str());
+            String ack = "ACK:" + value;
             pCharacteristic->setValue(ack.c_str());
             pCharacteristic->notify();
             Serial.print("Sent ACK: ");
